#!/usr/bin/env python3
"""
Script de debug pour v√©rifier la connexion et les mod√®les
"""

import sys
import os

# Ajouter le dossier parent au PYTHONPATH
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from catalogue.backend.database import engine, Base
from catalogue.backend.models import Category, Product, Utilisateur

def debug_connection():
    """Debug de la connexion et des mod√®les"""
    print("üîç DEBUG CONNEXION ET MOD√àLES")
    print("=" * 50)
    
    # Test de connexion
    try:
        with engine.connect() as conn:
            print("‚úÖ Connexion √† Postgres r√©ussie")
            
            # Test simple
            from sqlalchemy import text
            result = conn.execute(text("SELECT 1"))
            print("‚úÖ Requ√™te simple r√©ussie")
            
    except Exception as e:
        print(f"‚ùå Erreur de connexion: {e}")
        return False
    
    # V√©rifier les mod√®les
    print(f"\nüìã Mod√®les disponibles:")
    print(f"  - Base: {Base}")
    print(f"  - Category: {Category}")
    print(f"  - Product: {Product}")
    print(f"  - Utilisateur: {Utilisateur}")
    
    # V√©rifier les m√©tadonn√©es
    print(f"\nüîß M√©tadonn√©es des mod√®les:")
    print(f"  - Tables dans Base.metadata: {list(Base.metadata.tables.keys())}")
    
    return True

def try_create_tables():
    """Essayer de cr√©er les tables avec plus de d√©tails"""
    print(f"\nüöÄ TENTATIVE DE CR√âATION DES TABLES")
    print("=" * 50)
    
    try:
        # Cr√©er les tables
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Base.metadata.create_all() ex√©cut√© sans erreur")
        
        # V√©rifier imm√©diatement
        from sqlalchemy import text
        with engine.connect() as conn:
            result = conn.execute(text("""
                SELECT table_name 
                FROM information_schema.tables 
                WHERE table_schema = 'public'
                ORDER BY table_name
            """))
            
            tables = [row[0] for row in result]
            print(f"\nüìã Tables trouv√©es apr√®s cr√©ation ({len(tables)}):")
            for table in tables:
                print(f"  ‚úì {table}")
                
            if len(tables) == 0:
                print("‚ö†Ô∏è  Aucune table cr√©√©e - probl√®me avec les mod√®les")
                return False
                
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation: {e}")
        import traceback
        traceback.print_exc()
        return False
    
    return True

if __name__ == "__main__":
    if debug_connection():
        try_create_tables()
    else:
        print("\n‚ùå Impossible de continuer sans connexion")
