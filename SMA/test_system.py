#!/usr/bin/env python3
"""
Script de test pour v√©rifier le bon fonctionnement du SMA
Teste tous les agents corrig√©s et l'orchestrateur
"""

import asyncio
import sys
import os
from pathlib import Path

# Ajouter le r√©pertoire SMA au path
sys.path.append(str(Path(__file__).parent))

from agents.agent_orchestrator import AgentOrchestrator
from agents.product_search_agent import ProductSearchAgent
from agents.customer_service_agent import CustomerServiceAgent
from agents.recommendation_agent import RecommendationAgent
from agents.cart_management_agent import CartManagementAgent
from agents.voice_agent import VoiceAgent
from agents.multimodal_agent import MultimodalAgent

async def test_individual_agents():
    """Teste chaque agent individuellement"""
    print("üîç **TEST DES AGENTS INDIVIDUELS**\n")
    
    # Test ProductSearchAgent
    print("1. Test ProductSearchAgent...")
    try:
        agent = ProductSearchAgent()
        result = await agent.execute({
            "search_query": "tablette",
            "user_message": "Je cherche une tablette",
            "session_id": "test-123"
        })
        print(f"   ‚úÖ Succ√®s: {result.get('response_text', 'Pas de r√©ponse')[:50]}...")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test CustomerServiceAgent
    print("2. Test CustomerServiceAgent...")
    try:
        agent = CustomerServiceAgent()
        result = await agent.execute({
            "user_message": "Comment retourner un produit ?",
            "session_id": "test-123"
        })
        print(f"   ‚úÖ Succ√®s: {result.get('response_text', 'Pas de r√©ponse')[:50]}...")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test RecommendationAgent
    print("3. Test RecommendationAgent...")
    try:
        agent = RecommendationAgent()
        result = await agent.execute({
            "user_message": "Donnez-moi des recommandations",
            "session_id": "test-123"
        })
        print(f"   ‚úÖ Succ√®s: {result.get('response_text', 'Pas de r√©ponse')[:50]}...")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test CartManagementAgent
    print("4. Test CartManagementAgent...")
    try:
        agent = CartManagementAgent()
        result = await agent.execute({
            "user_message": "Voir mon panier",
            "session_id": "test-123"
        })
        print(f"   ‚úÖ Succ√®s: {result.get('response_text', 'Pas de r√©ponse')[:50]}...")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test VoiceAgent
    print("5. Test VoiceAgent...")
    try:
        agent = VoiceAgent()
        result = await agent.execute({
            "user_message": "Test agent vocal",
            "session_id": "test-123"
        })
        print(f"   ‚úÖ Succ√®s: {result.get('response_text', 'Pas de r√©ponse')[:50]}...")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")
    
    # Test MultimodalAgent
    print("6. Test MultimodalAgent...")
    try:
        agent = MultimodalAgent()
        result = await agent.execute({
            "user_message": "Analyser cette image",
            "session_id": "test-123"
        })
        print(f"   ‚úÖ Succ√®s: {result.get('response_text', 'Pas de r√©ponse')[:50]}...")
    except Exception as e:
        print(f"   ‚ùå Erreur: {e}")

async def test_orchestrator():
    """Teste l'orchestrateur principal"""
    print("\nüéØ **TEST DE L'ORCHESTRATEUR**\n")
    
    try:
        orchestrator = AgentOrchestrator()
        print("‚úÖ Orchestrateur initialis√© avec succ√®s")
        
        # Test d'ex√©cution simple
        result = await orchestrator.execute({
            "user_query": "Je cherche une tablette et veux des recommandations",
            "user_id": 1,
            "session_id": "test-orchestrator-123",
            "context": {"urgent": False}
        })
        
        if result.get("success"):
            print("‚úÖ Orchestrateur fonctionne correctement")
            print(f"   Agents utilis√©s: {result.get('agents_used', [])}")
            print(f"   User stories identifi√©es: {result.get('user_stories_identified', [])}")
        else:
            print(f"‚ö†Ô∏è Orchestrateur a rencontr√© des probl√®mes: {result.get('error', 'Erreur inconnue')}")
            
    except Exception as e:
        print(f"‚ùå Erreur critique dans l'orchestrateur: {e}")

async def test_system_health():
    """Teste la sant√© globale du syst√®me"""
    print("\nüè• **TEST DE SANT√â DU SYST√àME**\n")
    
    try:
        orchestrator = AgentOrchestrator()
        health = await orchestrator.get_system_health()
        
        if "error" not in health:
            print(f"‚úÖ Statut global: {health.get('overall_status', 'inconnu')}")
            print(f"   Agents sains: {health.get('healthy_agents', 0)}/{health.get('total_agents', 0)}")
            print(f"   Pourcentage de sant√©: {health.get('health_percentage', 0)}%")
            
            # D√©tails par agent
            print("\n   D√©tails par agent:")
            for agent_name, status in health.get('agent_status', {}).items():
                emoji = "‚úÖ" if status.get('status') == 'healthy' else "‚ùå"
                print(f"     {emoji} {agent_name}: {status.get('status', 'inconnu')}")
        else:
            print(f"‚ùå Erreur lors du test de sant√©: {health.get('error')}")
            
    except Exception as e:
        print(f"‚ùå Erreur lors du test de sant√©: {e}")

async def main():
    """Fonction principale de test"""
    print("üöÄ **D√âMARRAGE DES TESTS DU SMA**\n")
    print("=" * 50)
    
    # Test des agents individuels
    await test_individual_agents()
    
    # Test de l'orchestrateur
    await test_orchestrator()
    
    # Test de sant√© du syst√®me
    await test_system_health()
    
    print("\n" + "=" * 50)
    print("üéâ **TESTS TERMIN√âS**")
    print("\nSi tu vois des ‚úÖ, ton SMA fonctionne bien !")
    print("Si tu vois des ‚ùå, il y a encore des corrections √† faire.")

if __name__ == "__main__":
    asyncio.run(main())
